import unittest
import math


def merge(left, right):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result

def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

def Ordenate(arr):
    return merge_sort(arr)


class TestSortingAlgorithms(unittest.TestCase):

    def setUp(self):
        self.sort_function = Ordenate


    def test_empty_list(self):
        self.assertEqual(self.sort_function([]), [])


    def test_single_element_list(self):
        self.assertEqual(self.sort_function([1]), [1])


    def test_sorted_list(self):
        self.assertEqual(self.sort_function([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])


    def test_reverse_sorted_list(self):
        self.assertEqual(self.sort_function([5, 4, 3, 2, 1]), [1, 2, 3, 4, 5])


    def test_unsorted_list(self):
        self.assertEqual(self.sort_function([3, 1, 4, 2, 5]), [1, 2, 3, 4, 5])


    def test_list_with_duplicates(self):
        self.assertEqual(self.sort_function([3, 1, 2, 2, 5, 3]), [1, 2, 2, 3, 3, 5])


    def test_list_with_negative_numbers(self):
        self.assertEqual(self.sort_function([-3, 1, -2, 2, 0, 5, -1]), [-3, -2, -1, 0, 1, 2, 5])


    def test_large_list(self):
        large_list = list(range(1000, 0, -1))
        sorted_large_list = list(range(1, 1001))
        self.assertEqual(self.sort_function(large_list), sorted_large_list)


if __name__ == '__main__':
    unittest.main(argv=['first-arg-is-ignored'], exit=False)



[INFO] The elapsed time was: 4.196552515029907 segundos