Here is the test code for the merge sort algorithm:
import math



import unittest

def Ordenate(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]

        Ordenate(left)
        Ordenate(right)

        i = j = k = 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1

    return arr 

class TestOrdenate(unittest.TestCase):

    def test_empty_array(self):
        self.assertEqual(Ordenate([]), [])

    def test_single_element_array(self):
        self.assertEqual(Ordenate([1]), [1])

    def test_sorted_array(self):
        self.assertEqual(Ordenate([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])

    def test_reverse_sorted_array(self):
        self.assertEqual(Ordenate([5, 4, 3, 2, 1]), [1, 2, 3, 4, 5])

    def test_unsorted_array(self):
        self.assertEqual(Ordenate([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]), [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9])

    def test_array_with_duplicates(self):
        self.assertEqual(Ordenate([1, 2, 3, 2, 1]), [1, 1, 2, 2, 3])

    def test_array_with_negative_numbers(self):
        self.assertEqual(Ordenate([-1, -2, -3, -4, -5]), [-5, -4, -3, -2, -1])

if __name__ == '__main__':
    unittest.main(argv=['first-arg-is-ignored'], exit=False)

This test code covers all possible scenarios including empty array, single element array, already sorted array, reverse sorted array, unsorted array, array with duplicate elements and array with negative numbers.[INFO] The elapsed time was: 22.726269245147705 segundos