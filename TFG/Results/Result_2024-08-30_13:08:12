
import math

import unittest

def merge(left, right):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result

def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

def Ordenate(arr):
    return merge_sort(arr)

class TestMergeSort(unittest.TestCase):

    def test_empty_array(self):
        self.assertEqual(Ordenate([]), [])

    def test_single_element_array(self):
        self.assertEqual(Ordenate([1]), [1])

    def test_sorted_array(self):
        self.assertEqual(Ordenate([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])

    def test_reverse_sorted_array(self):
        self.assertEqual(Ordenate([5, 4, 3, 2, 1]), [1, 2, 3, 4, 5])

    def test_unsorted_array(self):
        self.assertEqual(Ordenate([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]), [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9])

    def test_array_with_duplicates(self):
        self.assertEqual(Ordenate([1, 2, 3, 2, 1]), [1, 1, 2, 2, 3])

    def test_array_with_negative_numbers(self):
        self.assertEqual(Ordenate([-1, -2, -3, -4, -5]), [-5, -4, -3, -2, -1])

if __name__ == '__main__':
    unittest.main(argv=['first-arg-is-ignored'], exit=False)
[INFO] The elapsed time was: 28.778592824935913 segundos