import unittest
import math

def Ordenate(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]

        Ordenate(left)
        Ordenate(right)

        i = j = k = 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1

    return arr

class TestSortingAlgorithms(unittest.TestCase):

    def setUp(self):
        self.sort_function = Ordenate


    def test_empty_list(self):
        self.assertEqual(self.sort_function([]), [])


    def test_single_element_list(self):
        self.assertEqual(self.sort_function([1]), [1])


    def test_sorted_list(self):
        self.assertEqual(self.sort_function([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])


    def test_reverse_sorted_list(self):
        self.assertEqual(self.sort_function([5, 4, 3, 2, 1]), [1, 2, 3, 4, 5])


    def test_unsorted_list(self):
        self.assertEqual(self.sort_function([3, 1, 4, 2, 5]), [1, 2, 3, 4, 5])


    def test_list_with_duplicates(self):
        self.assertEqual(self.sort_function([3, 1, 2, 2, 5, 3]), [1, 2, 2, 3, 3, 5])


    def test_list_with_negative_numbers(self):
        self.assertEqual(self.sort_function([-3, 1, -2, 2, 0, 5, -1]), [-3, -2, -1, 0, 1, 2, 5])


    def test_large_list(self):
        large_list = list(range(1000, 0, -1))
        sorted_large_list = list(range(1, 1001))
        self.assertEqual(self.sort_function(large_list), sorted_large_list)


if __name__ == '__main__':
    unittest.main(argv=['first-arg-is-ignored'], exit=False)



[INFO] The elapsed time was: 6.696574926376343 segundos